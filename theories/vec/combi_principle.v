(**************************************************************)
(*   Copyright Dominique Larchey-Wendling [*]                 *)
(*                                                            *)
(*                             [*] Affiliation LORIA -- CNRS  *)
(**************************************************************)
(*      This file is distributed under the terms of the       *)
(*        Mozilla Public License Version 2.0, MPL-2.0         *)
(**************************************************************)

From Coq
  Require Import List Utf8.

From KruskalTrees
  Require Import notations idx vec.

From KruskalFinite
  Require Import finite choice.

Require Import base notations.

Import idx_notations vec_notations.

Set Implicit Arguments.

#[local] Notation FAN w := (Œª c, vec_fall2 (Œª x l, x ‚àà l) c w).

Fact fin_FAN X n (w : vec (list X) n) : fin (FAN w).
Proof. apply fin_vec_fall2 with (R := Œª l x, x ‚àà l); fin auto. Qed.

(** Similar to list_combi_principle in Kruskal-Higman but for vectors 
    in place of lists. *)
Theorem vec_combi_principle X n w (P : rel‚ÇÅ (vec X n)) (B : rel‚ÇÅ X) :
         (‚àÄc, FAN w c ‚Üí P c ‚à® ‚àÉi, B c‚¶Éi‚¶Ñ)
       ‚Üí (‚àÉc, FAN w c ‚àß P c) ‚à® (‚àÉi, ‚àÄx, x ‚àà w‚¶Éi‚¶Ñ ‚Üí B x).
Proof.
  induction w as [ | l n w IHw ] in P |- *; intros HPB.
  + destruct (HPB ‚àÖ) as [ | (i & _) ]; auto with vec_db.
    * left; exists ‚àÖ; auto with vec_db.
    * idx invert all.
  + assert (H: ‚àÄx, x ‚àà l ‚Üí B x ‚à® ‚àÄc, FAN w c ‚Üí P (x##c) ‚à® ‚àÉi, B c‚¶Éi‚¶Ñ).
    1:{ intros x Hx.
        apply fin_choice_cst_left.
        + apply fin_FAN.
        + intros c Hc.
          destruct (HPB (x##c)) as [ | [] ]; eauto with vec_db.
          idx invert all; simpl in *; eauto. }
    apply fin_choice in H as [ | (x & Hx & [ (c & []) | (i & ?) ]%IHw)]; fin auto.
    * right; exists ùïÜ; eauto.
    * left; exists (x##c); eauto with vec_db.
    * right; exists (ùïä i); eauto.
Qed.

Arguments vec_combi_principle {X n}.

Corollary fin_vec_fall2_find X Y (R : X ‚Üí Y ‚Üí Prop) P n (v : vec X n) :
      (‚àÄi, fin (R v‚¶Éi‚¶Ñ))
    ‚Üí (‚àÄw, vec_fall2 R v w ‚Üí ‚àÉi, P w‚¶Éi‚¶Ñ)
    ‚Üí (‚àÉi, R v‚¶Éi‚¶Ñ ‚äÜ‚ÇÅ P).
Proof.
  intros (w & Hw)%vec_reif_t Hv.
  destruct (vec_combi_principle w ‚ä•‚ÇÅ P)
    as [ (_ & _ & []) | (i & ?) ].
  + intros c Hc.
    destruct (Hv c); eauto.
    intro; apply Hw, Hc.
  + exists i; intros ? ?%Hw; auto.
Qed.

